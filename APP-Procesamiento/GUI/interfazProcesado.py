# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfazProcesado.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from sys import path
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from matplotlib.pyplot import plot
from Funciones.ifft_multiple_files import create_ifft_file
from Funciones.merge_ascans import store_c_scan_files
from Funciones.c_scan_background_subtraction import remove_background_and_save
from Funciones.c_scan_background_removal import remove_average_and_save
from Funciones.parallel_kirchhoff_migration import execute_migration
from Funciones.a_scan_plot import plot_a_scan_from_merged_file
from Funciones.b_scan_plot import plot_b_scan_from_merged_file
from Funciones.c_scan_plot import plot_c_scan_from_merged_file


import tkinter as tk
from tkinter import filedialog
from glob import glob
import os
import shutil


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1210, 598)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_19 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_19.setObjectName("gridLayout_19")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_18 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_18.setObjectName("gridLayout_18")
        self.groupBox_procesado = QtWidgets.QGroupBox(self.frame)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_procesado.setFont(font)
        self.groupBox_procesado.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_procesado.setObjectName("groupBox_procesado")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_procesado)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.groupBox_backgroundRemotion = QtWidgets.QGroupBox(self.groupBox_procesado)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_backgroundRemotion.setFont(font)
        self.groupBox_backgroundRemotion.setObjectName("groupBox_backgroundRemotion")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_backgroundRemotion)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.pushButton_backgroundRemotion = QtWidgets.QPushButton(self.groupBox_backgroundRemotion)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_backgroundRemotion.setFont(font)
        self.pushButton_backgroundRemotion.setObjectName("pushButton_backgroundRemotion")
        self.gridLayout_3.addWidget(self.pushButton_backgroundRemotion, 0, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem, 0, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 0, 2, 1, 1)
        self.gridLayout_6.addWidget(self.groupBox_backgroundRemotion, 2, 0, 1, 1)
        self.groupBox_ifft = QtWidgets.QGroupBox(self.groupBox_procesado)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_ifft.setFont(font)
        self.groupBox_ifft.setObjectName("groupBox_ifft")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_ifft)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.lineEdit_rawFileName = QtWidgets.QLineEdit(self.groupBox_ifft)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_rawFileName.setFont(font)
        self.lineEdit_rawFileName.setText("")
        self.lineEdit_rawFileName.setObjectName("lineEdit_rawFileName")
        self.gridLayout_2.addWidget(self.lineEdit_rawFileName, 0, 1, 1, 1)
        self.label_rawFileName = QtWidgets.QLabel(self.groupBox_ifft)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_rawFileName.setFont(font)
        self.label_rawFileName.setObjectName("label_rawFileName")
        self.gridLayout_2.addWidget(self.label_rawFileName, 0, 0, 1, 1)
        self.pushButton_IFT = QtWidgets.QPushButton(self.groupBox_ifft)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_IFT.setFont(font)
        self.pushButton_IFT.setObjectName("pushButton_IFT")
        self.gridLayout_2.addWidget(self.pushButton_IFT, 0, 2, 1, 1)
        self.gridLayout_6.addWidget(self.groupBox_ifft, 1, 0, 1, 2)
        self.groupBox_bacgroundSubstarction = QtWidgets.QGroupBox(self.groupBox_procesado)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_bacgroundSubstarction.setFont(font)
        self.groupBox_bacgroundSubstarction.setObjectName("groupBox_bacgroundSubstarction")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_bacgroundSubstarction)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pushButton_backgroundSubtraction = QtWidgets.QPushButton(self.groupBox_bacgroundSubstarction)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_backgroundSubtraction.setFont(font)
        self.pushButton_backgroundSubtraction.setObjectName("pushButton_backgroundSubtraction")
        self.gridLayout_4.addWidget(self.pushButton_backgroundSubtraction, 1, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem2, 1, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem3, 1, 0, 1, 1)
        self.label_backgroundFile = QtWidgets.QLabel(self.groupBox_bacgroundSubstarction)
        self.label_backgroundFile.setObjectName("label_backgroundFile")
        self.gridLayout_4.addWidget(self.label_backgroundFile, 0, 0, 1, 1)
        self.lineEdit_backgroundPath = QtWidgets.QLineEdit(self.groupBox_bacgroundSubstarction)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_backgroundPath.setFont(font)
        self.lineEdit_backgroundPath.setObjectName("lineEdit_backgroundPath")
        self.gridLayout_4.addWidget(self.lineEdit_backgroundPath, 0, 1, 1, 1)
        self.toolButton_backgroundFilePath = QtWidgets.QToolButton(self.groupBox_bacgroundSubstarction)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.toolButton_backgroundFilePath.setFont(font)
        self.toolButton_backgroundFilePath.setObjectName("toolButton_backgroundFilePath")
        self.gridLayout_4.addWidget(self.toolButton_backgroundFilePath, 0, 2, 1, 1)
        self.gridLayout_6.addWidget(self.groupBox_bacgroundSubstarction, 2, 1, 1, 1)
        self.groupBox_migration = QtWidgets.QGroupBox(self.groupBox_procesado)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_migration.setFont(font)
        self.groupBox_migration.setObjectName("groupBox_migration")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_migration)
        self.gridLayout_5.setObjectName("gridLayout_5")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem4, 4, 3, 1, 1)
        self.label_polarizationAxis = QtWidgets.QLabel(self.groupBox_migration)
        self.label_polarizationAxis.setObjectName("label_polarizationAxis")
        self.gridLayout_5.addWidget(self.label_polarizationAxis, 1, 2, 1, 1)
        self.comboBox_polarizationAxis = QtWidgets.QComboBox(self.groupBox_migration)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.comboBox_polarizationAxis.setFont(font)
        self.comboBox_polarizationAxis.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox_polarizationAxis.setObjectName("comboBox_polarizationAxis")
        self.comboBox_polarizationAxis.addItem("")
        self.comboBox_polarizationAxis.addItem("")
        self.gridLayout_5.addWidget(self.comboBox_polarizationAxis, 1, 3, 1, 1)
        self.lineEdit_zini = QtWidgets.QLineEdit(self.groupBox_migration)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_zini.setFont(font)
        self.lineEdit_zini.setText("")
        self.lineEdit_zini.setObjectName("lineEdit_zini")
        self.gridLayout_5.addWidget(self.lineEdit_zini, 2, 1, 1, 1)
        self.lineEdit_dielectricConstant = QtWidgets.QLineEdit(self.groupBox_migration)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_dielectricConstant.setFont(font)
        self.lineEdit_dielectricConstant.setObjectName("lineEdit_dielectricConstant")
        self.gridLayout_5.addWidget(self.lineEdit_dielectricConstant, 1, 1, 1, 1)
        self.label_zini = QtWidgets.QLabel(self.groupBox_migration)
        self.label_zini.setObjectName("label_zini")
        self.gridLayout_5.addWidget(self.label_zini, 2, 0, 1, 1)
        self.label_dielectricConstant = QtWidgets.QLabel(self.groupBox_migration)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_dielectricConstant.setFont(font)
        self.label_dielectricConstant.setObjectName("label_dielectricConstant")
        self.gridLayout_5.addWidget(self.label_dielectricConstant, 1, 0, 1, 1)
        self.label_zend = QtWidgets.QLabel(self.groupBox_migration)
        self.label_zend.setObjectName("label_zend")
        self.gridLayout_5.addWidget(self.label_zend, 2, 2, 1, 1)
        self.lineEdit_zend = QtWidgets.QLineEdit(self.groupBox_migration)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_zend.setFont(font)
        self.lineEdit_zend.setObjectName("lineEdit_zend")
        self.gridLayout_5.addWidget(self.lineEdit_zend, 2, 3, 1, 1)
        self.pushButton_migration = QtWidgets.QPushButton(self.groupBox_migration)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_migration.setFont(font)
        self.pushButton_migration.setObjectName("pushButton_migration")
        self.gridLayout_5.addWidget(self.pushButton_migration, 4, 2, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem5, 4, 4, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem6, 4, 1, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem7, 4, 0, 1, 1)
        self.gridLayout_6.addWidget(self.groupBox_migration, 3, 0, 1, 2)
        self.frame_SeleccionRuta = QtWidgets.QFrame(self.groupBox_procesado)
        self.frame_SeleccionRuta.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_SeleccionRuta.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_SeleccionRuta.setObjectName("frame_SeleccionRuta")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_SeleccionRuta)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_filePath = QtWidgets.QLineEdit(self.frame_SeleccionRuta)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_filePath.setFont(font)
        self.lineEdit_filePath.setObjectName("lineEdit_filePath")
        self.gridLayout.addWidget(self.lineEdit_filePath, 0, 1, 1, 1)
        self.toolButton_filePath = QtWidgets.QToolButton(self.frame_SeleccionRuta)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.toolButton_filePath.setFont(font)
        self.toolButton_filePath.setObjectName("toolButton_filePath")
        self.gridLayout.addWidget(self.toolButton_filePath, 0, 2, 1, 1)
        self.lineEdit_rawFilePath = QtWidgets.QLineEdit(self.frame_SeleccionRuta)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_rawFilePath.setFont(font)
        self.lineEdit_rawFilePath.setObjectName("lineEdit_rawFilePath")
        self.gridLayout.addWidget(self.lineEdit_rawFilePath, 1, 1, 1, 1)
        self.label_rawFilePath = QtWidgets.QLabel(self.frame_SeleccionRuta)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_rawFilePath.setFont(font)
        self.label_rawFilePath.setObjectName("label_rawFilePath")
        self.gridLayout.addWidget(self.label_rawFilePath, 1, 0, 1, 1)
        self.toolButton_rawFilePath = QtWidgets.QToolButton(self.frame_SeleccionRuta)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.toolButton_rawFilePath.setFont(font)
        self.toolButton_rawFilePath.setObjectName("toolButton_rawFilePath")
        self.gridLayout.addWidget(self.toolButton_rawFilePath, 1, 2, 1, 1)
        self.label_filePath = QtWidgets.QLabel(self.frame_SeleccionRuta)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_filePath.setFont(font)
        self.label_filePath.setObjectName("label_filePath")
        self.gridLayout.addWidget(self.label_filePath, 0, 0, 1, 1)
        self.gridLayout_6.addWidget(self.frame_SeleccionRuta, 0, 0, 1, 2)
        self.gridLayout_18.addWidget(self.groupBox_procesado, 0, 0, 1, 1)
        self.groupBox_grafico = QtWidgets.QGroupBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_grafico.sizePolicy().hasHeightForWidth())
        self.groupBox_grafico.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_grafico.setFont(font)
        self.groupBox_grafico.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox_grafico.setObjectName("groupBox_grafico")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.groupBox_grafico)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.groupBox_cscan = QtWidgets.QGroupBox(self.groupBox_grafico)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_cscan.setFont(font)
        self.groupBox_cscan.setObjectName("groupBox_cscan")
        self.gridLayout_16 = QtWidgets.QGridLayout(self.groupBox_cscan)
        self.gridLayout_16.setObjectName("gridLayout_16")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_16.addItem(spacerItem8, 0, 0, 1, 1)
        self.pushButton_cScanPlot = QtWidgets.QPushButton(self.groupBox_cscan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_cScanPlot.setFont(font)
        self.pushButton_cScanPlot.setObjectName("pushButton_cScanPlot")
        self.gridLayout_16.addWidget(self.pushButton_cScanPlot, 0, 1, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_16.addItem(spacerItem9, 0, 2, 1, 1)
        self.gridLayout_17.addWidget(self.groupBox_cscan, 2, 0, 1, 2)
        self.frame_SeleccionRuta_3 = QtWidgets.QFrame(self.groupBox_grafico)
        self.frame_SeleccionRuta_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_SeleccionRuta_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_SeleccionRuta_3.setObjectName("frame_SeleccionRuta_3")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.frame_SeleccionRuta_3)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.lineEdit_rawFilePathPlot = QtWidgets.QLineEdit(self.frame_SeleccionRuta_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_rawFilePathPlot.setFont(font)
        self.lineEdit_rawFilePathPlot.setObjectName("lineEdit_rawFilePathPlot")
        self.gridLayout_13.addWidget(self.lineEdit_rawFilePathPlot, 0, 1, 1, 1)
        self.toolButton_rawFilePathPlot = QtWidgets.QToolButton(self.frame_SeleccionRuta_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.toolButton_rawFilePathPlot.setFont(font)
        self.toolButton_rawFilePathPlot.setObjectName("toolButton_rawFilePathPlot")
        self.gridLayout_13.addWidget(self.toolButton_rawFilePathPlot, 0, 2, 1, 1)
        self.label_rawFilePathPlot = QtWidgets.QLabel(self.frame_SeleccionRuta_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_rawFilePathPlot.setFont(font)
        self.label_rawFilePathPlot.setObjectName("label_rawFilePathPlot")
        self.gridLayout_13.addWidget(self.label_rawFilePathPlot, 0, 0, 1, 1)
        self.gridLayout_17.addWidget(self.frame_SeleccionRuta_3, 0, 0, 1, 2)
        self.groupBox_ascan = QtWidgets.QGroupBox(self.groupBox_grafico)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_ascan.setFont(font)
        self.groupBox_ascan.setObjectName("groupBox_ascan")
        self.gridLayout_14 = QtWidgets.QGridLayout(self.groupBox_ascan)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.label_aScanXUnits = QtWidgets.QLabel(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_aScanXUnits.setFont(font)
        self.label_aScanXUnits.setObjectName("label_aScanXUnits")
        self.gridLayout_14.addWidget(self.label_aScanXUnits, 0, 2, 1, 1)
        self.label_aScanYCoords = QtWidgets.QLabel(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_aScanYCoords.setFont(font)
        self.label_aScanYCoords.setObjectName("label_aScanYCoords")
        self.gridLayout_14.addWidget(self.label_aScanYCoords, 1, 0, 1, 1)
        self.lineEdit_aScanComparePath = QtWidgets.QLineEdit(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_aScanComparePath.setFont(font)
        self.lineEdit_aScanComparePath.setObjectName("lineEdit_aScanComparePath")
        self.gridLayout_14.addWidget(self.lineEdit_aScanComparePath, 1, 3, 1, 1)
        self.toolButton_aScanCompare = QtWidgets.QToolButton(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.toolButton_aScanCompare.setFont(font)
        self.toolButton_aScanCompare.setObjectName("toolButton_aScanCompare")
        self.gridLayout_14.addWidget(self.toolButton_aScanCompare, 1, 4, 1, 1)
        self.label_aScanXCoords = QtWidgets.QLabel(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_aScanXCoords.setFont(font)
        self.label_aScanXCoords.setObjectName("label_aScanXCoords")
        self.gridLayout_14.addWidget(self.label_aScanXCoords, 0, 0, 1, 1)
        self.checkBox_aScanCompare = QtWidgets.QCheckBox(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.checkBox_aScanCompare.setFont(font)
        self.checkBox_aScanCompare.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox_aScanCompare.setObjectName("checkBox_aScanCompare")
        self.gridLayout_14.addWidget(self.checkBox_aScanCompare, 0, 3, 1, 2)
        self.lineEdit_aScanYCoords = QtWidgets.QLineEdit(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_aScanYCoords.setFont(font)
        self.lineEdit_aScanYCoords.setObjectName("lineEdit_aScanYCoords")
        self.gridLayout_14.addWidget(self.lineEdit_aScanYCoords, 1, 1, 1, 1)
        self.lineEdit_aScanXCoords = QtWidgets.QLineEdit(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_aScanXCoords.setFont(font)
        self.lineEdit_aScanXCoords.setObjectName("lineEdit_aScanXCoords")
        self.gridLayout_14.addWidget(self.lineEdit_aScanXCoords, 0, 1, 1, 1)
        self.pushButton_aScanPlot = QtWidgets.QPushButton(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_aScanPlot.setFont(font)
        self.pushButton_aScanPlot.setObjectName("pushButton_aScanPlot")
        self.gridLayout_14.addWidget(self.pushButton_aScanPlot, 2, 1, 1, 3)
        self.label_aScanYUnits = QtWidgets.QLabel(self.groupBox_ascan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_aScanYUnits.setFont(font)
        self.label_aScanYUnits.setObjectName("label_aScanYUnits")
        self.gridLayout_14.addWidget(self.label_aScanYUnits, 1, 2, 1, 1)
        self.gridLayout_17.addWidget(self.groupBox_ascan, 1, 0, 1, 1)
        self.groupBox_bscan = QtWidgets.QGroupBox(self.groupBox_grafico)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox_bscan.setFont(font)
        self.groupBox_bscan.setObjectName("groupBox_bscan")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.groupBox_bscan)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.comboBox_bScanPlaneSelect = QtWidgets.QComboBox(self.groupBox_bscan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.comboBox_bScanPlaneSelect.setFont(font)
        self.comboBox_bScanPlaneSelect.setObjectName("comboBox_bScanPlaneSelect")
        self.comboBox_bScanPlaneSelect.addItem("")
        self.comboBox_bScanPlaneSelect.addItem("")
        self.gridLayout_15.addWidget(self.comboBox_bScanPlaneSelect, 0, 1, 1, 1)
        self.label_bScanCoords = QtWidgets.QLabel(self.groupBox_bscan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_bScanCoords.setFont(font)
        self.label_bScanCoords.setObjectName("label_bScanCoords")
        self.gridLayout_15.addWidget(self.label_bScanCoords, 1, 0, 1, 1)
        self.lineEdit_bScanCoords = QtWidgets.QLineEdit(self.groupBox_bscan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.lineEdit_bScanCoords.setFont(font)
        self.lineEdit_bScanCoords.setObjectName("lineEdit_bScanCoords")
        self.gridLayout_15.addWidget(self.lineEdit_bScanCoords, 1, 1, 1, 1)
        self.label_bScanCoordsUnits = QtWidgets.QLabel(self.groupBox_bscan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.label_bScanCoordsUnits.setFont(font)
        self.label_bScanCoordsUnits.setObjectName("label_bScanCoordsUnits")
        self.gridLayout_15.addWidget(self.label_bScanCoordsUnits, 1, 3, 1, 1)
        self.label_24 = QtWidgets.QLabel(self.groupBox_bscan)
        self.label_24.setObjectName("label_24")
        self.gridLayout_15.addWidget(self.label_24, 0, 0, 1, 1)
        self.pushButton_bScanPlot = QtWidgets.QPushButton(self.groupBox_bscan)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton_bScanPlot.setFont(font)
        self.pushButton_bScanPlot.setObjectName("pushButton_bScanPlot")
        self.gridLayout_15.addWidget(self.pushButton_bScanPlot, 2, 1, 1, 1)
        self.gridLayout_17.addWidget(self.groupBox_bscan, 1, 1, 1, 1)
        self.gridLayout_18.addWidget(self.groupBox_grafico, 0, 1, 1, 1)
        self.gridLayout_19.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Atributos adicionales
        self.filePath = None
        self.rawFilePath = None
        self.backgroundPath = None
        self.lastDir = None
        self.rawFilePathPlot = None
        self.rawFilePathPlotComparation = None
        ##Modificaciones
        self.lineEdit_filePath.setReadOnly(True)
        self.lineEdit_rawFilePath.setReadOnly(True)
        self.lineEdit_backgroundPath.setReadOnly(True)
        self.lineEdit_aScanComparePath.setReadOnly(True)
        
        #Se desabilitan las funciones de procesado
        self.disableIfft()
        self.disableProcessing()
        self.disablePlotting()
        ##Acciones
        self.toolButton_filePath.clicked.connect(self.buscarRutaMediciones)
        self.toolButton_rawFilePath.clicked.connect(self.buscarRutaArchivoH5)
        self.pushButton_IFT.clicked.connect(self.execIfft)
        self.pushButton_backgroundRemotion.clicked.connect(self.execBackgroundRemotion)
        self.toolButton_backgroundFilePath.clicked.connect(self.buscarRutaBackgroundH5)
        self.pushButton_backgroundSubtraction.clicked.connect(self.execBackgroundSubtraction)
        self.pushButton_migration.clicked.connect(self.execMigration)
        self.toolButton_rawFilePathPlot.clicked.connect(self.buscarRutaArchivoH5Plot)
        self.checkBox_aScanCompare.clicked.connect(self.comparationCheck)
        self.toolButton_aScanCompare.clicked.connect(self.buscarRutaArchivoSimulaciones)
        self.pushButton_aScanPlot.clicked.connect(self.execAscanPlot)
        self.pushButton_bScanPlot.clicked.connect(self.execBscanPlot)
        self.pushButton_cScanPlot.clicked.connect(self.execCscanPlot)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Procesamiento de datos GPR"))
        self.groupBox_procesado.setTitle(_translate("MainWindow", "Procesado"))
        self.groupBox_backgroundRemotion.setTitle(_translate("MainWindow", "Background Remotion"))
        self.pushButton_backgroundRemotion.setText(_translate("MainWindow", "Ejecutar"))
        self.groupBox_ifft.setTitle(_translate("MainWindow", "TF Inversa"))
        self.label_rawFileName.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">Nombre destino:</p></body></html>"))
        self.pushButton_IFT.setText(_translate("MainWindow", "Ejecutar"))
        self.groupBox_bacgroundSubstarction.setTitle(_translate("MainWindow", "Background Subtraction"))
        self.pushButton_backgroundSubtraction.setText(_translate("MainWindow", "Ejecutar"))
        self.label_backgroundFile.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:8pt; font-weight:400;\">Escenario:</span></p></body></html>"))
        self.toolButton_backgroundFilePath.setText(_translate("MainWindow", "..."))
        self.groupBox_migration.setTitle(_translate("MainWindow", "Kirchhoff Migration"))
        self.label_polarizationAxis.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:8pt; font-weight:400;\">Eje de polarización:</span></p></body></html>"))
        self.comboBox_polarizationAxis.setItemText(0, _translate("MainWindow", "x"))
        self.comboBox_polarizationAxis.setItemText(1, _translate("MainWindow", "y"))
        self.label_zini.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:8pt; font-weight:400;\">Z_ini:</span></p></body></html>"))
        self.label_dielectricConstant.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:12pt;\">ε</span><span style=\" font-size:12pt; vertical-align:sub;\">r</span><span style=\" font-size:12pt;\">:</span></p></body></html>"))
        self.label_zend.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:8pt; font-weight:400;\">Z_end:</span></p></body></html>"))
        self.pushButton_migration.setText(_translate("MainWindow", "Ejecutar"))
        self.toolButton_filePath.setText(_translate("MainWindow", "..."))
        self.label_rawFilePath.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">Archivo .h5:</p></body></html>"))
        self.toolButton_rawFilePath.setText(_translate("MainWindow", "..."))
        self.label_filePath.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">Ruta de las mediciones:</p></body></html>"))
        self.groupBox_grafico.setTitle(_translate("MainWindow", "Gráfico"))
        self.groupBox_cscan.setTitle(_translate("MainWindow", "C-Scan"))
        self.pushButton_cScanPlot.setText(_translate("MainWindow", "Graficar"))
        self.toolButton_rawFilePathPlot.setText(_translate("MainWindow", "..."))
        self.label_rawFilePathPlot.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">Archivo .h5:</p></body></html>"))
        self.groupBox_ascan.setTitle(_translate("MainWindow", "A-Scan"))
        self.label_aScanXUnits.setText(_translate("MainWindow", "mm."))
        self.label_aScanYCoords.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">y:</p></body></html>"))
        self.toolButton_aScanCompare.setText(_translate("MainWindow", "..."))
        self.label_aScanXCoords.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">x:</p></body></html>"))
        self.checkBox_aScanCompare.setText(_translate("MainWindow", "Comparar A-Scan"))
        self.pushButton_aScanPlot.setText(_translate("MainWindow", "Graficar"))
        self.label_aScanYUnits.setText(_translate("MainWindow", "mm."))
        self.groupBox_bscan.setTitle(_translate("MainWindow", "B-Scan"))
        self.comboBox_bScanPlaneSelect.setItemText(0, _translate("MainWindow", "x"))
        self.comboBox_bScanPlaneSelect.setItemText(1, _translate("MainWindow", "y"))
        self.label_bScanCoords.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\">Coordenada:</p></body></html>"))
        self.label_bScanCoordsUnits.setText(_translate("MainWindow", "mm."))
        self.label_24.setText(_translate("MainWindow", "<html><head/><body><p align=\"right\"><span style=\" font-size:8pt; font-weight:400;\">Plano:</span></p></body></html>"))
        self.pushButton_bScanPlot.setText(_translate("MainWindow", "Graficar"))
    
    def pedirRutaUsuario(self, archivo=False ):
        root = tk.Tk()
        root.withdraw()
        if (self.lastDir==None) or (self.lastDir=="/") or (self.lastDir==""):
            initialdir = os.getcwd()
        else:
            initialdir = self.lastDir
        if archivo:
            path = filedialog.askopenfilename(parent=root, initialdir=initialdir)
            #self.lastDir = path
            self.lastDir = os.path.dirname( path )
        else:
            path = filedialog.askdirectory(parent=root, initialdir=initialdir) + "/"
            self.lastDir = os.path.dirname(path)
        root.destroy()
        return path

    def enableIfft(self):
        self.lineEdit_rawFileName.setEnabled(True)
        self.pushButton_IFT.setEnabled(True)

    def disableIfft(self):
        self.lineEdit_rawFileName.setText("")
        self.lineEdit_rawFileName.setEnabled(False)
        self.pushButton_IFT.setEnabled(False)
        self.filePath = None

        self.lineEdit_filePath.setText("")

    def enableProcessing(self):
        enabled = True
        self.pushButton_backgroundRemotion.setEnabled(enabled)
        self.pushButton_backgroundSubtraction.setEnabled(enabled)
        self.pushButton_migration.setEnabled(enabled)
        self.toolButton_backgroundFilePath.setEnabled(enabled)
        self.lineEdit_backgroundPath.setEnabled(enabled)

        self.lineEdit_dielectricConstant.setEnabled(enabled)
        self.lineEdit_zini.setEnabled(enabled)
        self.lineEdit_zend.setEnabled(enabled)
        self.comboBox_polarizationAxis.setEnabled(enabled)
    
    def disableProcessing(self):
        enabled = False
        self.pushButton_backgroundRemotion.setEnabled(enabled)
        self.pushButton_backgroundSubtraction.setEnabled(enabled)
        self.pushButton_migration.setEnabled(enabled)
        self.toolButton_backgroundFilePath.setEnabled(enabled)
        self.lineEdit_backgroundPath.setEnabled(enabled)
        self.lineEdit_backgroundPath.setText("")

        self.lineEdit_dielectricConstant.setEnabled(enabled)
        self.lineEdit_zini.setEnabled(enabled)
        self.lineEdit_zend.setEnabled(enabled)
        self.comboBox_polarizationAxis.setEnabled(enabled)
        self.lineEdit_dielectricConstant.setText("")
        self.lineEdit_zini.setText("")
        self.lineEdit_zend.setText("")

        self.lineEdit_rawFilePath.setText("")
    
    def enablePlotting(self):
        enabled = True
        self.lineEdit_aScanXCoords.setEnabled(enabled)
        self.lineEdit_aScanYCoords.setEnabled(enabled)
        #self.lineEdit_aScanComparePath.setEnabled(enabled)
        self.checkBox_aScanCompare.setEnabled(enabled)
        #self.checkBox_aScanCompare.setChecked(enabled)
        #self.toolButton_aScanCompare.setEnabled(enabled)
        self.pushButton_aScanPlot.setEnabled(enabled)

        self.comboBox_bScanPlaneSelect.setEnabled(enabled)
        self.lineEdit_bScanCoords.setEnabled(enabled)
        self.pushButton_bScanPlot.setEnabled(enabled)

        self.pushButton_cScanPlot.setEnabled(enabled)

    def disablePlotting(self):
        enabled = False
        self.lineEdit_aScanXCoords.setEnabled(enabled)
        self.lineEdit_aScanYCoords.setEnabled(enabled)
        self.lineEdit_aScanComparePath.setEnabled(enabled)
        self.checkBox_aScanCompare.setEnabled(enabled)
        self.checkBox_aScanCompare.setChecked(enabled)
        self.toolButton_aScanCompare.setEnabled(enabled)
        self.pushButton_aScanPlot.setEnabled(enabled)

        self.comboBox_bScanPlaneSelect.setEnabled(enabled)
        self.lineEdit_bScanCoords.setEnabled(enabled)
        self.pushButton_bScanPlot.setEnabled(enabled)
        self.rawFilePathPlotComparation = None

        self.pushButton_cScanPlot.setEnabled(enabled)

    def comparationCheck(self, MainWindow):
        if(self.checkBox_aScanCompare.isChecked()):
            self.lineEdit_aScanComparePath.setEnabled(True)
            self.toolButton_aScanCompare.setEnabled(True)
        else:
            self.lineEdit_aScanComparePath.setEnabled(False)
            self.toolButton_aScanCompare.setEnabled(False)

    def lanzarMensajeError(self, info):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Error")
        msg.setInformativeText(info)
        msg.setWindowTitle("Error")
        msg.exec_()

    def lanzarMensajeExito(self, info=None):
        msg = QMessageBox()
        if(info!=None):
            msg.setIcon(QMessageBox.Information)
            msg.setInformativeText(info[1])
            msg.setWindowTitle(info[0])
            msg.exec_()
        else:
            msg.setIcon(QMessageBox.Information)
            msg.setText("Completado.")
            msg.setInformativeText("Proceso finalizado con éxito.")
            msg.setWindowTitle("Información.")
            msg.exec_()

    #Busca la carpeta con las mediciones en formato .csv
    def buscarRutaMediciones(self, MainWindow):
        directory = self.pedirRutaUsuario()
        files = glob(directory+"*")
        allCsvFiles = all( file[-3:]=="csv" for file in files )
        if (directory[:-1]+"\\Time\\" in glob(directory+"*/")):
            self.lanzarMensajeError("La carpeta seleccionada ya contiene una carpeta con mediciones en el dominio del tiempo. Elimínela si desea nuevamente ejecutar IFFT en las muestras.")
            if self.filePath==None:
                self.disableIfft()
        elif(allCsvFiles):
            try:
                self.lineEdit_filePath.setText(directory)
                self.filePath = directory
                #create_ifft_file(directory)
                self.enableIfft()
                self.lineEdit_rawFilePath.setText("")
                self.rawFilePath = None
                self.disableProcessing()
            except Exception as ex:
                shutil.rmtree(directory+"Time", ignore_errors=True)
                self.lanzarMensajeError("Ha ocurrido un error desconocido, por favor intente de nuevo.")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.disableIfft()
        elif(not(directory=="/")):
            self.lanzarMensajeError("La carpeta seleccionada debe contener únicamente mediciones en el formato csv.")
            if self.filePath==None:
                self.disableIfft()
                self.disableProcessing()
    
    #Busca la ruta del archivo de formato .h5
    def buscarRutaArchivoH5(self, MainWindow):
        file = self.pedirRutaUsuario(archivo=True)
        if file=="":
            pass
        elif (file[-3:]!=".h5"):# and (file!="/"):
            self.lanzarMensajeError("El archivo seleccionado no está en el formato .h5.")
            #print(file[-3:])
            if self.rawFilePath==None:
                self.disableProcessing()
        else:
            try:
                self.lineEdit_rawFilePath.setText(file)
                self.rawFilePath = file
                self.enableProcessing()
                self.disableIfft()
                self.lineEdit_filePath.setText("")
                self.filePath = None
            except Exception as ex:
                self.lanzarMensajeError("Ha ocurrido un error desconocido, por favor intente de nuevo.")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.disableProcessing()
                self.lineEdit_rawFilePath.setText("")
                self.rawFilePath = None

    #Busca la ruta del archivo de formato .h5 que sirve para substraer el background
    def buscarRutaBackgroundH5(self, MainWindow):
        file = self.pedirRutaUsuario(archivo=True)
        if file=="":
            pass
        elif (file[-3:]!=".h5"):# and (file!="/"):
            self.lanzarMensajeError("El archivo seleccionado no está en el formato .h5.")
            #print(file[-3:])
        else:
            try:
                self.lineEdit_backgroundPath.setText(file)
                self.backgroundPath = file
                #self.enableProcessing()
                #self.disableIfft()
                #self.lineEdit_filePath.setText("")
                #self.filePath = None
            except Exception as ex:
                self.lanzarMensajeError("Ha ocurrido un error desconocido, por favor intente de nuevo.")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                #self.disableProcessing
                self.lineEdit_backgroundPath.setText("")

    #Busca la ruta del archivo de formato .h5 para graficar
    def buscarRutaArchivoH5Plot(self, MainWindow):
        file = self.pedirRutaUsuario(archivo=True)
        if file=="":
            pass
        elif (file[-3:]!=".h5"):# and (file!="/"):
            self.lanzarMensajeError("El archivo seleccionado no está en el formato .h5.")
            #print(file[-3:])
            if self.rawFilePathPlot==None:
                self.disablePlotting()
        else:
            try:
                self.lineEdit_rawFilePathPlot.setText(file)
                self.rawFilePathPlot = file
                self.enablePlotting()
            except Exception as ex:
                self.lanzarMensajeError("Ha ocurrido un error desconocido, por favor intente de nuevo.")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.disablePlotting()
                self.lineEdit_rawFilePathPlot.setText("")
                self.rawFilePathPlot = None

    #Busca la ruta del archivo de formato .csv de simulacion para graficar
    def buscarRutaArchivoSimulaciones(self, MainWindow):
        file = self.pedirRutaUsuario(archivo=True)
        if file=="":
            pass
        elif (file[-4:]!=".csv"):# and (file!="/"):
            self.lanzarMensajeError("El archivo seleccionado no está en el formato .csv.")
            #print(file[-3:])
            #if self.rawFilePathPlot==None:
                #self.disablePlotting()
        else:
            try:
                self.lineEdit_aScanComparePath.setText(file)
                self.rawFilePathPlotComparation = file
                #self.enablePlotting()
            except Exception as ex:
                self.lanzarMensajeError("Ha ocurrido un error desconocido, por favor intente de nuevo.")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                #self.disablePlotting()
                self.lineEdit_aScanComparePath.setText("")
                self.rawFilePathPlotComparation = None

    def execIfft(self, MainWindow):
        directory = self.filePath
        fileName = self.lineEdit_rawFileName.text()
        if fileName=="":
            fileName="C_scan_default_title"
        else:
            fileName = "C_scan_"+fileName
        try:
            if (directory[:-1]+"\\Time\\" in glob(directory+"*/")):
                self.lanzarMensajeError("La carpeta seleccionada ya contiene una carpeta con mediciones en el dominio del tiempo. Elimínela si desea nuevamente ejecutar IFFT en las muestras.")
                #self.disableIfft()
                #self.lineEdit_filePath.setText("")
                #self.filePath = None
            else:
                create_ifft_file(directory)
                store_c_scan_files(directory+"Time", title=fileName)
                self.lanzarMensajeExito()
                self.rawFilePath = directory + "Time/C_Scans/"+fileName+".h5"
                self.lineEdit_rawFilePath.setText(self.rawFilePath)
                self.enableProcessing()
        except PermissionError:
                shutil.rmtree(directory+"Time", ignore_errors=True)
                self.lanzarMensajeError("No acceda a la carpeta Time mientras se procesan las mediciones.")
                #self.disableIfft()
                #self.lineEdit_filePath.setText("")
                #self.filePath = None
                self.disableProcessing()
                
        except Exception as ex:
            shutil.rmtree(directory+"Time", ignore_errors=True)
            self.lanzarMensajeError("Ha ocurrido un error desconocido, por favor intente de nuevo.")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.disableProcessing()

    def execBackgroundRemotion(self, MainWindow):
        file = self.rawFilePath
        if(file==None):
            self.lanzarMensajeError("No se encontró el archivo con mediciones en formato .h5.")
        else:
            try:
                remove_average_and_save(file, 'x')
                self.lanzarMensajeExito()
            except:
                self.lanzarMensajeError("Ocurrió un error procesando el archivo, por favor intentelo de nuevo.")
                #self.backgroundPath = None
                #self.lineEdit_backgroundPath.setText("")
                self.disableProcessing()
                self.rawFilePath = None
                self.lineEdit_rawFilePath.setText("")

    def execBackgroundSubtraction(self, MainWindow):
        file = self.rawFilePath
        back = self.backgroundPath
        if(back==None):
            self.lanzarMensajeError("Por favor, escoja un archivo que contenga las mediciones de fondo.")
        else:
            try:
                remove_background_and_save(file, back, 'x')
                self.lanzarMensajeExito()
            except:
                self.lanzarMensajeError("Ocurrió un error procesando el archivo, por favor intentelo de nuevo.")
                self.backgroundPath = None
                self.lineEdit_backgroundPath.setText("")

    def execMigration(self, MainWindow):
        try:
            file = self.rawFilePath
            er = float( self.lineEdit_dielectricConstant.text().replace(",",".") )
            pol = self.comboBox_polarizationAxis.currentText()
            z_ini = float( self.lineEdit_zini.text().replace(",",".") )
            z_end = float( self.lineEdit_zend.text().replace(",",".") )

            title = 'migration_er' + str(er) 
            execute_migration(file, title, er, pol, z_ini, z_end)
            self.lanzarMensajeExito()
            
        except ValueError:
            self.lanzarMensajeError("Los valores suministrados para las constantes no son válidos.")
        except Exception as ex:
            self.lanzarMensajeError("Ha ocurrido un error procesando el archivo, por favor intente de nuevo.")
            print(file)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            #self.disableProcessing
            self.disableProcessing()
            self.lineEdit_rawFilePath.setText("")
            self.rawFilePath = None
    
    def execAscanPlot(self, MainWindow):
        try:
            file = self.rawFilePathPlot
            x = int( float( self.lineEdit_aScanXCoords.text().replace(",",".") ) )
            y = int( float( self.lineEdit_aScanYCoords.text().replace(",",".") ) )
            if(self.rawFilePathPlotComparation!=None):
                compare = self.rawFilePathPlotComparation
            else:
                compare = ""
            plot_a_scan_from_merged_file(file, x, y, compare)
            self.lanzarMensajeExito()
        except ValueError:
            self.lanzarMensajeError("Los valores suministrados para las coordenadas no son válidos.")
        except IndexError:
            self.lanzarMensajeError("Los valores suministrados para las coordenadas exceden la posición máxima en "+os.path.basename(file)+". Por favor, intente con valores expaciales menores.")
        except Exception as ex:
            self.lanzarMensajeError("Ha ocurrido un error procesando el archivo, por favor intente de nuevo.")
            print(file)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            #self.disableProcessing
            self.disablePlotting()
            self.lineEdit_rawFilePathPlot.setText("")
            self.rawFilePathPlot = None
    
    def execBscanPlot(self, MainWindow):
        file = self.rawFilePathPlot
        axis = self.comboBox_bScanPlaneSelect.currentText()
        coord = int( self.lineEdit_bScanCoords.text() )
        try:
            plot_b_scan_from_merged_file(file, horizontal_axis=axis, amp=0.0065, plane_num=coord)
        except:
            print("Error.")

    def execCscanPlot(self, MainWindow):
        file = self.rawFilePathPlot
        plot_c_scan_from_merged_file(file)


